// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  address     String?
  website     String?
  phoneNumber String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isActive    Boolean   @default(true)
  
  // Relationships
  users       User[]    // One-to-many relationship with users
  headAdmin   User?     @relation("CompanyHeadAdmin", fields: [headAdminId], references: [id])
  headAdminId String?   @unique // Each company has exactly one head admin
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  password      String
  firstName     String
  lastName      String
  role          UserRole  @default(EMPLOYEE)
  position      String?   // Stanowisko w firmie
  phoneNumber   String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lastLoginAt   DateTime?
  isActive      Boolean   @default(true)
  avatar        String?   // URL do avatara
  department    String?   // Dział w firmie
  
  // Company relationship
  company       Company?  @relation(fields: [companyId], references: [id])
  companyId     String?
  
  // Head Admin relationship
  headAdminFor  Company?  @relation("CompanyHeadAdmin")
  
  // Dodatkowe informacje biznesowe
  assignedDeals     Deal[]    @relation("AssignedDeals")
  createdDeals      Deal[]    @relation("CreatedDeals")
  assignedContacts  Contact[] @relation("AssignedContacts")
  createdContacts   Contact[] @relation("CreatedContacts")
  notes             Note[]
}

enum UserRole {
  HEAD_ADMIN
  ADMIN
  MANAGER
  EMPLOYEE
  READONLY
}

// Placeholder dla powiązanych modeli
model Deal {
  id String @id @default(uuid())
  // Pola będą dodane później
  assignedTo    User   @relation("AssignedDeals", fields: [assignedToId], references: [id])
  assignedToId  String
  createdBy     User   @relation("CreatedDeals", fields: [createdById], references: [id])
  createdById   String
}

model Contact {
  id String @id @default(uuid())
  // Pola będą dodane później
  assignedTo    User   @relation("AssignedContacts", fields: [assignedToId], references: [id])
  assignedToId  String
  createdBy     User   @relation("CreatedContacts", fields: [createdById], references: [id])
  createdById   String
}

model Note {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String
} 